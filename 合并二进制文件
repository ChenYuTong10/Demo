//"标头.h"
struct BinaryData { double Data; BinaryData* Next; };
//输入二进制数据
int InputBinaryData(BinaryData*&);
//交换元素
void Swap(double&, double&);
//对链表从小到大进行排序
void ListSortUp(BinaryData*&);
//创建二进制文件
char* CreateAscendingOrderBinaryFile(char*);
//将两个升序的二进制文件合并
char* CombineAscendingOrderBinaryFile(const char*, const char*, char*);

//实现.cpp
#include <iostream>
#include <fstream>
#include "标头.h"
using namespace std;
//输入二进制数据同时返回链表长度
int InputBinaryData(BinaryData*& HeadOfList)
{
	int ListLength = 0;
	BinaryData* NewPoint = NULL, * LinkPoint = NULL;
	cout << "请输入数据,结束请输入\"0\":";
	//对不起,能力不够,原本打算在"while"中使用"cin>>NewPoint->Data",但是有无法解决的Bug,原来版本的代码请登录"Gitee"仓库.
	while (1)
	{
		NewPoint = new BinaryData;
		cin >> NewPoint->Data;
		if (NewPoint->Data == 0) { break; }
		if (HeadOfList == NULL) { HeadOfList = NewPoint; }
		else
		{
			if (LinkPoint != NULL) { LinkPoint->Next = NewPoint; }
			else { cout << "指针出错啦...\n"; abort(); }
		}
		LinkPoint = NewPoint;
		ListLength = ListLength + 1;
		NewPoint = new BinaryData;
	}
	cin.clear();
	if (LinkPoint != NULL) { LinkPoint->Next = NULL; }
	delete NewPoint;
	NewPoint = NULL;
	return ListLength;
}
//交换元素
void Swap(double& Data1, double& Data2)
{
	double ExchangeData = 0.0;
	ExchangeData = Data1;
	Data1 = Data2;
	Data2 = ExchangeData;
}
//对链表进行从小到大排序
//【想法】:我最初的想法是比较两个链表中的数据,然后交换链表中的结点,但是实际上不用交换结点,只需要交换结点中的数据就行了
void ListSortUp(BinaryData*& HeadOfList)
{
	BinaryData* FormerPoint = NULL, * LatterPoint = NULL;
	for (FormerPoint = HeadOfList; FormerPoint != NULL && FormerPoint->Next != NULL; FormerPoint = FormerPoint->Next)
	{
		for (LatterPoint = FormerPoint->Next; LatterPoint != NULL; LatterPoint = LatterPoint->Next)
		{
			if (FormerPoint->Data > LatterPoint->Data) { Swap(FormerPoint->Data, LatterPoint->Data); }
		}
	}
}
//创建二进制文件
char* CreateAscendingOrderBinaryFile(char* FileName)
{
	int ListLength = 0, Subscript = 0, LineFeed = 0;
	BinaryData* HeadOfList = NULL;
	fstream BinaryFile;
	//输入文件名
	cout << "请输入文件:";
	FileName = new char[100];
	cin >> FileName;
	//打开文件
	BinaryFile.open(FileName, ios::out | ios::binary);
	if (!BinaryFile) { cerr << "文件无法创建或打开...\n"; abort(); }
	//输入数据
	ListLength = InputBinaryData(HeadOfList);
	//将数据进行排列
	ListSortUp(HeadOfList);
	//将数据写入二进制文件
	//这里直接对头结点操作的原因是这个链表只是用来储存的,不需要保存下来
	cout << "写入的数据有:\n";
	for (; Subscript < ListLength; Subscript = Subscript + 1)
	{
		BinaryFile.write((char*)&HeadOfList->Data, sizeof(double));
		cout << HeadOfList->Data << " "; 
		//控制每行数据的个数
		LineFeed = LineFeed + 1;
		if (LineFeed % 5 == 0) { cout << "\n"; }
		HeadOfList = HeadOfList->Next;
	}
	cout << "\n文件创建或打开成功...\n";
	//关闭文件
	BinaryFile.close();
	return FileName;
}
//将两个升序的二进制文件合并
char* CombineAscendingOrderBinaryFile(const char* File1, const char* File2,char* CombinedFile)
{
	int LineFeed = 0;
	double File1Data = 0.0, File2Data = 0.0;
	long File1_End = 0, File2_End = 0;
	fstream BinaryFile1, BinaryFile2, CombinedBinaryFile;
	//输入文件名
	cout << "请输入合并文件:";
	CombinedFile = new char[100];
	cin >> CombinedFile;
	//打开文件
	BinaryFile1.open(File1, ios::in | ios::binary);
	BinaryFile2.open(File2, ios::in | ios::binary);
	CombinedBinaryFile.open(CombinedFile, ios::out | ios::binary);
	if (!BinaryFile1 || !BinaryFile2 || !CombinedBinaryFile) { cerr << "文件无法创建或打开...\n"; abort(); }
	//记录结束的位置
	BinaryFile1.seekg(0, ios::end);	//将读指针移动到文件末尾
	File1_End = BinaryFile1.tellg();//返回位置信息
	BinaryFile1.seekg(0, ios::beg);	//将读指针移回文件开头
	BinaryFile2.seekg(0, ios::end);
	File2_End = BinaryFile2.tellg();
	BinaryFile2.seekg(0, ios::beg);
	//开始比较数据(这是一个算法)
	cout << "写入的数据有:\n";
	while (long(BinaryFile1.tellg()) != File1_End && long(BinaryFile2.tellg()) != File2_End)
	{
		BinaryFile1.read((char*)&File1Data, sizeof(double));
		BinaryFile2.read((char*)&File2Data, sizeof(double));
		if (File1Data < File2Data)
		{
			CombinedBinaryFile.write((char*)&File1Data, sizeof(double)); 
			cout << File1Data << " ";
			//由这个算法的原理可得,这里的"BinaryFile2"的读指针不应该移动,同理下面的"BinaryFile1"不能移动,所以要回退一个数据的字节大小
			BinaryFile2.seekg(-long(sizeof(double)), ios::cur);	//"-"表示往前移动
		}
		else
		{
			CombinedBinaryFile.write((char*)&File2Data, sizeof(double));
			cout << File2Data << " ";
			BinaryFile1.seekg(-long(sizeof(double)), ios::cur);
		}
		LineFeed = LineFeed + 1;
		if (LineFeed % 5 == 0) { cout << "\n"; }
	}
	//将剩下的元素写入文件
	while (BinaryFile1.tellg() != File1_End)
	{
		BinaryFile1.read((char*)&File1Data, sizeof(double));
		CombinedBinaryFile.write((char*)&File1Data, sizeof(double));
		cout << File1Data << " ";
	}
	while (BinaryFile2.tellg() != File2_End)
	{
		BinaryFile2.read((char*)&File2Data, sizeof(double));
		CombinedBinaryFile.write((char*)&File2Data, sizeof(double)); 
		cout << File2Data << " "; 
	}
	cout << "\n文件合并成功...";
	//关闭文件
	BinaryFile1.close();
	BinaryFile2.close();
	CombinedBinaryFile.close();
	return CombinedFile;
}


//主函数.cpp
#include <iostream>
#include <fstream>
#include "标头.h"
using namespace std;
int main()
{
	char* File1 = NULL, * File2 = NULL, * CombinedFile = NULL;
	File1 = CreateAscendingOrderBinaryFile(File1);
	File2 = CreateAscendingOrderBinaryFile(File2);
	CombinedFile = CombineAscendingOrderBinaryFile(File1, File2, CombinedFile);
	delete[]File1;
	delete[]File2;
	delete[]CombinedFile;
}