//"标头.h"
//单位员工的信息
struct Staff { unsigned IDNumber; char StaffName[20]; char Telephone[20]; char LivingAddress[100]; unsigned PostalCode; Staff* Next; };
//输入员工信息
void InputStaffInformation(std::fstream&);
//输出员工信息
void OutputStaffInformation(std::fstream&);
//创建职工的通讯录
char* CreateAddressBook(char*);
//寻找企业通讯录中的职工
void FindStaffInAddressBook(const char*);

//实现.cpp
#include <iostream>
#include <iomanip>
#include <fstream>
#include "标头.h"
using namespace std;
const Staff StaffEnd = { 0,"None","None","None",0 };
//输入员工信息
void InputStaffInformation(std::fstream& File)
{
	Staff staff;
	cout << "请输入员工的基本信息(编号,姓名,联系方式,居住地址及邮政编码):\n";
	while (cin >> staff.IDNumber >> staff.StaffName >> staff.Telephone >> staff.LivingAddress >> staff.PostalCode) { File.write((char*)&staff, sizeof(Staff)); }
	/*
	*【注意】:"Ctrl+Z"前面不能够存在数据,即:结束输入进程正确的方法是"输入数据"->"Enter"->"Ctrl+Z"->"Enter";
	*【原因】:前提——"Ctrl+Z"不会在缓存中留下字符,而且"Ctrl+Z"是键盘输入的截止,不一定是流的截止;
	*		然后涉及到"阻塞式检查"和"非组塞式检查",简单地说就是阻塞式检查在摁下"Enter"之前是不会对输入内容检查的,而"非阻塞式检查"是对输入内容进行即刻反应,
	*		"Ctrl+Z"属于阻塞式检查,因此如果直接在数据后摁下"Ctrl+Z",再摁下"Enter"的话,由于"Ctrl+Z"没有留下字符,这就导致检查不到"Ctrl+Z"的输入.
	*/
	cin.clear(); cin.sync();//输入的时候有用到"Ctrl+Z",需要重置
	//文件结束标志
	File.write((char*)&StaffEnd, sizeof(Staff));
}
//输出员工信息
void OutputStaffInformation(std::fstream& File)
{
	Staff staff = StaffEnd;
	cout << "职工信息:\n";
	cout << left << setw(10) << "职员编号";
	cout << left << setw(10) << "职员姓名";
	cout << left << setw(20) << "联系方式";
	cout << left << setw(20) << "居住地址";
	cout << left << setw(20) << "邮政编码" << "\n";	//这里的"\n"不能够连着与前面的内容一起写
	while (File)	//判断文件结束
	{
		File.read((char*)&staff, sizeof(Staff));
		if (staff.IDNumber != 0)
		{
			cout << left << setw(10) << staff.IDNumber;
			cout << left << setw(10) << staff.StaffName;
			cout << left << setw(20) << staff.Telephone;
			cout << left << setw(20) << staff.LivingAddress;
			cout << left << setw(20) << staff.PostalCode << "\n";
		}
	}
}
//创建通讯录
char* CreateAddressBook(char* FileName)
{
	Staff staff = StaffEnd, * HeadOfList = NULL;
	fstream AddressBook;
	//输入文件名
	cout << "请输入文件:";
	FileName = new char[100];
	cin >> FileName;
	//以写方式打开文件
	//【注意】:"ios::in"成立的前提是文件存在,如果不存在在流会失败.
	AddressBook.open(FileName, ios::out | ios::binary);
	if (!AddressBook) { cerr << "文件创建或打开失败...\n"; abort(); }
	//输入员工信息
	InputStaffInformation(AddressBook);
	//关闭文件
	AddressBook.close();
	//以读方式打开文件
	AddressBook.open(FileName, ios::in | ios::binary);
	//输出输入的所有员工信息
	OutputStaffInformation(AddressBook);
	//关闭文件
	AddressBook.close();
	return FileName;
}
//寻找企业通讯录中的职工
void FindStaffInAddressBook(const char* File)
{
	Staff staff = StaffEnd;
	unsigned ToBeFoundID = 0;
	fstream AddressBook;
	//打开文件
	AddressBook.open(File, ios::in | ios::binary);
	if (!AddressBook) { cout << "文件无法打开或不存在...\n"; abort(); }
	//输入职工编号
	cout << "请输入需要查找的职工编号...";
	cin >> ToBeFoundID;
	//寻找对应职工的资料
	while (AddressBook)
	{
		AddressBook.read((char*)&staff, sizeof(Staff));
		if (staff.IDNumber == ToBeFoundID)
		{
			cout << left << setw(10) << "职工编号";
			cout << left << setw(10) << "职工姓名";
			cout << left << setw(20) << "联系方式";
			cout << left << setw(20) << "居住地址";
			cout << left << setw(20) << "邮政编码" << "\n";
			cout << left << setw(10) << staff.IDNumber;
			cout << left << setw(10) << staff.StaffName;
			cout << left << setw(20) << staff.Telephone;
			cout << left << setw(20) << staff.LivingAddress;
			cout << left << setw(20) << staff.PostalCode << "\n";
			break;
		}
	}
	if (staff.IDNumber == 0) { cout << "找不到企业通讯录中所对应的员工...\n"; }
	//关闭文件
	AddressBook.close();
}

//主函数.cpp
#include <iostream>
#include <fstream>
#include "标头.h"
using namespace std;
int main()
{	
    char* File = NULL;
	File = CreateAddressBook(File);
    FindStaffInAddressBook(File);
	delete[]File;
}